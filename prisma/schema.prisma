// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// dbgenerated()

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Story {
  id        String     @default(cuid()) @id
  title     String
  content   String
  permalink String
  link      String
  tags      String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  status    String @default("QUEUED")
  owner    User   @relation(fields: [ownerId], references: [id])
  ownerId  String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String @default("clfpb52d40000sba6kgfi1o01")
  comments   Comment[]
  storyVotes   StoryVote[]
  @@unique(fields: [id, ownerId], name: "id_and_ownerId")
}

model Category {
  id     String     @default(cuid()) @id
  name   String
  stories Story[]
}

model Comment {
  id        String     @default(cuid()) @id
  content   String
  permalink String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  owner    User   @relation(fields: [ownerId], references: [id])
  ownerId  String
  status    String @default("PUBLISHED")
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   String
  commentVotes   CommentVote[]
  @@unique(fields: [id, ownerId], name: "id_and_ownerId")
}

model StoryVote {
  id        String     @default(cuid()) @id
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  owner    User   @relation(fields: [ownerId], references: [id])
  ownerId  String
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   String
  @@unique(fields: [id, ownerId], name: "id_and_ownerId")
}

model CommentVote {
  id        String     @default(cuid()) @id
  value     Int @default(1)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  owner    User   @relation(fields: [ownerId], references: [id])
  ownerId  String
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String
  @@unique(fields: [id, ownerId], name: "id_and_ownerId")
  @@unique(fields: [commentId, ownerId], name: "commentId_and_ownerId")
}

model User {
  id            String   @default(cuid()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  stories       Story[]
  comments      Comment[]
  storyVotes    StoryVote[]
  commentVotes    CommentVote[]
  sessions      Session[]
  accounts      Account[] 
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String      @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
